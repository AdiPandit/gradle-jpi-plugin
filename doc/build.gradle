/**
 * Rough demo of gradle HPI/JPI plugin. Clone git://github.com/jenkinsci/hello-world-plugin.git, copy this into
 * the cloned repo, and run "gradle jpi".
 */

apply from:"https://raw.github.com/jenkinsci/gradle-jpi-plugin/master/install"
                  
group = "org.jenkinsci.plugins"
version = "1.0-SNAPSHOT"
description = "This is a sample plugin, built with Gradle."

jenkinsPlugin {
    coreVersion = '1.420'                                               // Version of Jenkins core this plugin depends on.
    displayName = 'Hello World plugin built with Gradle'                // Human-readable name of plugin.
    url = 'http://wiki.jenkins-ci.org/display/JENKINS/SomePluginPage'   // URL for plugin on Jenkins wiki or elsewhere.
    gitHubUrl = 'https://github.com/jenkinsci/some-plugin'              // Plugin URL on GitHub. Optional.
}

// Note that as of right now, a minimum core version of 1.420 is required.

// If specifying additional repositories, do so *after* applying the jpi plugin and and specifying the core version.
// Otherwise, the additional repositories will end up ahead of mavenLocal, mavenCentral and the Jenkins repo, and will get
// hit for every possible artifact, slowing down resolution considerably.

// If depending on other Jenkins plugins, add them to your dependencies like this:
//     jenkinsPlugins([group: 'org.jenkins-ci.plugins', name: 'token-macro', version: '1.0', ext: 'jar'])
// Make sure to specify the "jar", and to add them to the jenkinsPlugins configuration. That configuration will be included in
// compile-time classpaths, but will be excluded from the resulting plugin bundle and Maven POM, as intended.


// To deploy a plugin to the Jenkins Maven repository, run "gradle deploy". You will need to have your credentials
// configured in a file, ~/.jenkins-ci.org, with the properties "userName" and "password" specified within.